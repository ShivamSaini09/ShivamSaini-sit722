name: CD - Production Deployment

on:
  push:
    branches:
      - main

jobs:
  deploy-production:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          cluster-name: ${{ secrets.AKS_CLUSTER_NAME }}
          resource-group: ${{ secrets.AKS_RESOURCE_GROUP }}

      - name: Create production namespace
        run: kubectl create namespace production --dry-run=client -o yaml | kubectl apply -f -

      - name: Apply ConfigMaps & Secrets
        run: |
          kubectl apply -f k8s/configmaps.yaml -n production
          kubectl apply -f k8s/secrets.yaml -n production

      - name: Deploy Databases
        run: |
          kubectl apply -f k8s/product-db.yaml -n production
          kubectl apply -f k8s/order-db.yaml -n production
          kubectl apply -f k8s/customer-db.yaml -n production

      - name: Deploy Backend Services 
        run: |
          kubectl apply -f k8s/product-service.yaml -n production
          kubectl apply -f k8s/order-service.yaml -n production
          kubectl apply -f k8s/customer-service.yaml -n production

      - name: Wait for all backend pods to be ready
        run: |
          for app in product-service order-service customer-service; do
            for pod in $(kubectl get pods -l app=$app -n production -o name); do
              kubectl wait --for=condition=ready "$pod" -n production --timeout=300s
            done
          done

      - name: Get external IPs of services
        id: get-ips
        run: |
          PRODUCT_IP=$(kubectl get svc product-service -n production -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          ORDER_IP=$(kubectl get svc order-service -n production -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          CUSTOMER_IP=$(kubectl get svc customer-service -n production -o jsonpath='{.status.loadBalancer.ingress[0].ip}')

          echo "PRODUCT_IP=$PRODUCT_IP" >> $GITHUB_ENV
          echo "ORDER_IP=$ORDER_IP" >> $GITHUB_ENV
          echo "CUSTOMER_IP=$CUSTOMER_IP" >> $GITHUB_ENV

      - name: Patch frontend main.js with new service IPs
        run: |
          sed -i "s|const PRODUCT_API_BASE_URL = .*|const PRODUCT_API_BASE_URL = 'http://${PRODUCT_IP}:8000';|" frontend/main.js
          sed -i "s|const ORDER_API_BASE_URL = .*|const ORDER_API_BASE_URL = 'http://${ORDER_IP}:8001';|" frontend/main.js
          sed -i "s|const CUSTOMER_API_BASE_URL = .*|const CUSTOMER_API_BASE_URL = 'http://${CUSTOMER_IP}:8002';|" frontend/main.js

      - name: Build & Push Frontend Image
        run: |
          docker build --platform linux/amd64 -t ${{ secrets.ACR_LOGIN_SERVER }}/frontend:latest ./frontend
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/frontend:latest

      - name: Deploy Frontend
        run: |
          kubectl set image deployment/frontend frontend=${{ secrets.ACR_LOGIN_SERVER }}/frontend:latest -n production
          kubectl rollout status deployment/frontend -n production

      - name: Wait for frontend to be ready
        run: |
          kubectl wait --for=condition=available --timeout=300s deployment/frontend -n production
          kubectl get svc frontend -n production
